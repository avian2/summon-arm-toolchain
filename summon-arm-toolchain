#!/bin/sh
# Written by Uwe Hermann <uwe@hermann-uwe.de>, released as public domain.
# Modified by Piotr Esden-Tempski <piotr@esden.net>, released as public domain.

# adapted for r0ket <http://r0ket.badge.events.ccc.de> development by
# Matthias Rampke <matthias@rampke.de>
# requires Homebrew <https://mxcl.github.com/homebrew>

# Stop if any command fails
set -e

##############################################################################
# Settings section
# You probably want to customize those
##############################################################################
TARGET=arm-none-eabi		# Or: TARGET=arm-elf
[ -z $PREFIX ] && PREFIX=${HOME}/arm	# Install location of your final toolchain
[ -z $WORKDIR ] && WORKDIR=$PREFIX/work     #temporary directory
PARALLEL=			# Or: PARALLEL="-j 5" for 4 CPUs
# Set to 'sudo' if you need superuser privileges while installing
SUDO=''
# Set to 1 to be quieter while running
QUIET=0
# Set to 1 to use linaro gcc instead of the FSF gcc
USE_LINARO=0
# Set to 1 to enable C++
USE_CPP=0
# Set to 1 to enable building of OpenOCD
OOCD_EN=0
# Set to 1 to build libstm32 provided by ST
LIBSTM32_EN=0
# Set to 1 to build libopenstm32 an open source library for stm32
LIBOPENSTM32_EN=0
# Make the gcc default to Cortex-M3
DEFAULT_TO_CORTEX_M3=1

##############################################################################
# Version and download url settings section
##############################################################################
if [ ${USE_LINARO} = 0 ] ; then
	# For FSF GCC:
	GCCVERSION=4.6.1
        if [ ${USE_CPP} = 0 ]; then
            GCC=gcc-core-${GCCVERSION}
            GCCDIR=gcc-${GCCVERSION}
        else
            GCC=gcc-${GCCVERSION}
            GCCDIR=${GCC}
        fi
        GCCURL=http://ftp.gnu.org/gnu/gcc/${GCCDIR}/${GCC}.tar.bz2
else
	# For the Linaro GCC:
	GCCRELEASE=4.6-2011.07
	GCCVERSION=4.6-2011.07-0
        GCC=gcc-linaro-${GCCRELEASE}
	GCCDIR=gcc-linaro-${GCCVERSION}
	GCCURL=http://launchpad.net/gcc-linaro/4.6/${GCCRELEASE}/+download/gcc-linaro-${GCCRELEASE}.tar.bz2
fi

BINUTILS=binutils-2.21
NEWLIB=newlib-1.19.0
GDB=gdb-7.3
OOCD=master
LIBCMSIS=v1.10-2
LIBSTM32=v3.0.0-1
LIBSTM32USB=v3.0.1-1
LIBOPENSTM32=master

##############################################################################
# Flags section
##############################################################################

if which getconf > /dev/null; then
	CPUS=$(getconf _NPROCESSORS_ONLN)
else
	CPUS=1
fi
PARALLEL=-j$((CPUS + 1))
echo "${CPUS} cpu's detected running make with '${PARALLEL}' flag"

GDBFLAGS=
BINUTILFLAGS=

if [ ${DEFAULT_TO_CORTEX_M3} = 0 ] ; then
	GCCFLAGS=
else
	# To default to the Cortex-M3:
	GCCFLAGS="--with-arch=armv7-m --with-mode=thumb --with-float=soft"
fi

# Pull in the local configuration, if any
if [ -f local.sh ]; then
    . ./local.sh
fi

MAKEFLAGS=${PARALLEL}
TARFLAGS=v

if [ ${QUIET} != 0 ]; then
    TARFLAGS=
    MAKEFLAGS="${MAKEFLAGS} -s"
fi

export PATH="${PREFIX}/bin:${PATH}"

SUMMON_DIR=${WORKDIR}
SOURCES=${SUMMON_DIR}/sources
STAMPS=${SUMMON_DIR}/stamps


##############################################################################
# Tool section
##############################################################################
TAR=tar

##############################################################################
# OS and Tooldetection section
# Detects which tools and flags to use
##############################################################################

case "$(uname)" in
	Linux)
	echo "Found Linux OS."
	;;
	Darwin)
	echo "Found Darwin OS."

	# darwin dependencies
	DARWINDEPS="wget mpfr libmpc gmp"

  echo "Installing dependencies ..."
  if ! which brew > /dev/null; then
    echo "Homebrew not installed."
  else
      brew install ${DARWINDEPS} | (grep -v '^Warning: Formula already installed: ' || true)
  fi

  GCCFLAGS="${GCCFLAGS} \
      --with-gmp=$(brew --prefix gmp) \
      --with-mpfr=$(brew --prefix mpfr) \
                  --with-mpc=$(brew --prefix mpc)
  -with-libiconv-prefix=$(brew --prefix libiconv)"

  TAR=gnutar

	OOCD_CFLAGS="-m32 -I/opt/mine/include -I/opt/local/include"
	OOCD_LDFLAGS="-L/opt/mine/lib -L/opt/local/lib"
	;;
	CYGWIN*)
	echo "Found CygWin that means Windows most likely."
	;;
	*)
	echo "Found unknown OS. Aborting!"
	exit 1
	;;
esac

##############################################################################
# Building section
# You probably don't have to touch anything after this
##############################################################################

# Fetch a versioned file from a URL
fetch() {
    if [ ! -e ${STAMPS}/$1.fetch ]; then
        log "Downloading $1 sources..."
        wget -c $2
        touch ${STAMPS}/$1.fetch
    fi
}

# Log a message out to the console
log() {
    echo "******************************************************************"
    echo "* $*"
    echo "******************************************************************"
}

# Unpack an archive
unpack() {
    log Unpacking $*
    # Use 'auto' mode decompression.  Replace with a switch if tar doesn't support -a
    ARCHIVE=$(ls ${SOURCES}/$1.tar.*)
    case ${ARCHIVE} in
	*.bz2)
	    echo "archive type bz2"
	    TYPE=j
	    ;;
	*.gz)
	    echo "archive type gz"
	    TYPE=z
	    ;;
	*)
	    echo "Unknown archive type of $1"
	    echo ${ARCHIVE}
	    exit 1
	    ;;
    esac
    ${TAR} xf${TYPE}${TARFLAGS} ${SOURCES}/$1.tar.*
}

# Install a build
install() {
    log $1
    ${SUDO} make ${MAKEFLAGS} $2 $3 $4 $5 $6 $7 $8
}

if [ ! -d $SUMMON_DIR ]; then
    mkdir -p ${SUMMON_DIR}
    SUMMON_DIR_CREATED=1
else
    SUMMON_DIR_CREATED=0
fi
mkdir -p ${STAMPS} ${SOURCES}

cd ${SOURCES}

fetch ${BINUTILS} http://ftp.gnu.org/gnu/binutils/${BINUTILS}.tar.bz2
fetch ${GCC} ${GCCURL}
fetch ${NEWLIB} ftp://sources.redhat.com/pub/newlib/${NEWLIB}.tar.gz
fetch ${GDB} http://ftp.gnu.org/gnu/gdb/${GDB}.tar.bz2

if [ ${OOCD_EN} != 0 ]; then
if [ ! -e openocd-${OOCD}.tar.bz2 ]; then
	log "Cloning OpenOCD sources..."
	git clone git://openocd.git.sourceforge.net/gitroot/openocd/openocd openocd-${OOCD}
        cd openocd-${OOCD}
	./bootstrap
	cd ..
	tar cfvj openocd-${OOCD}.tar.bz2 openocd-${OOCD}
        #git archive --format=tar --prefix=openocd-${OOCD}/ ${OOCD} | \
        #    bzip2 --stdout > ../openocd-${OOCD}.tar.bz2
        rm -rf openocd-${OOCD}
fi
fi

if [ ${LIBSTM32_EN} != 0 ]; then
if [ ! -e libcmsis-${LIBCMSIS}.tar.bz2 ]; then
	log "Cloning libcmsis sources..."
	git clone git://git.open-bldc.org/libcmsis.git
        cd libcmsis
        git archive --format=tar --prefix=libcmsis-${LIBCMSIS}/ ${LIBCMSIS} | \
            bzip2 --stdout > ../libcmsis-${LIBCMSIS}.tar.bz2
        cd ..
        rm -rf libcmsis
fi

if [ ! -e libstm32-${LIBSTM32}.tar.bz2 ]; then
	log "Cloning libstm32 sources..."
	git clone git://git.open-bldc.org/libstm32.git
        cd libstm32
        git archive --format=tar --prefix=libstm32-${LIBSTM32}/ ${LIBSTM32} | \
            bzip2 --stdout > ../libstm32-${LIBSTM32}.tar.bz2
        cd ..
        rm -rf libstm32
fi

if [ ! -e libstm32usb-${LIBSTM32USB}.tar.bz2 ]; then
	log "Cloning libstm32usb sources..."
	git clone git://git.open-bldc.org/libstm32usb.git
        cd libstm32usb
        git archive --format=tar --prefix=libstm32usb-${LIBSTM32USB}/ ${LIBSTM32USB} | \
            bzip2 --stdout > ../libstm32usb-${LIBSTM32USB}.tar.bz2
        cd ..
        rm -rf libstm32usb
fi
fi

if [ ${LIBOPENSTM32_EN} != 0 ]; then
if [ ! -e libopenstm32-${LIBOPENSTM32}.tar.bz2 ]; then
	log "Cloning libopenstm32 sources..."
	git clone git://libopenstm32.git.sourceforge.net/gitroot/libopenstm32/libopenstm32
        cd libopenstm32
        git archive --format=tar --prefix=libopenstm32-${LIBOPENSTM32}/ ${LIBOPENSTM32} | \
            bzip2 --stdout > ../libopenstm32-${LIBOPENSTM32}.tar.bz2
        cd ..
        rm -rf libopenstm32
fi
fi

cd ${SUMMON_DIR}

if [ ! -e build ]; then
    mkdir build
fi

if [ ! -e ${STAMPS}/${BINUTILS}.build ]; then
    unpack ${BINUTILS}
    cd build
    log "Configuring ${BINUTILS}"
    ../${BINUTILS}/configure --target=${TARGET} \
                           --prefix=${PREFIX} \
                           --enable-interwork \
                           --enable-multilib \
                           --with-gnu-as \
                           --with-gnu-ld \
                           --disable-nls \
                           --disable-werror \
			   ${BINUTILFLAGS}
    log "Building ${BINUTILS}"
    make ${MAKEFLAGS}
    install ${BINUTILS} install
    cd ..
    log "Cleaning up ${BINUTILS}"
    touch ${STAMPS}/${BINUTILS}.build
    rm -rf build/* ${BINUTILS}
fi

if [ ! -e ${STAMPS}/${GCC}-boot.build ]; then
    unpack ${GCC} boot
    cd build
    log "Configuring ${GCC}-boot"
    ../${GCCDIR}/configure --target=${TARGET} \
                      --prefix=${PREFIX} \
                      --enable-interwork \
                      --enable-multilib \
                      --enable-languages="c" \
                      --with-newlib \
                      --without-headers \
                      --disable-shared \
                      --with-gnu-as \
                      --with-gnu-ld \
                      --disable-nls \
                      --disable-werror \
		      --with-system-zlib \
		      ${GCCFLAGS}
    log "Building ${GCC}-boot"
    make ${MAKEFLAGS} all-gcc
    install ${GCC}-boot install-gcc
    cd ..
    log "Cleaning up ${GCC}-boot"
    touch ${STAMPS}/${GCC}-boot.build
    rm -rf build/* ${GCCDIR}
fi

if [ ! -e ${STAMPS}/${NEWLIB}.build ]; then
    unpack ${NEWLIB}
    cd build
    log "Configuring ${NEWLIB}"
    # configuration options and flags partially
    # from https://github.com/jsnyder/arm-eabi-toolchain
    ../${NEWLIB}/configure --target=${TARGET} \
                         --prefix=${PREFIX} \
                         --enable-interwork \
                         --enable-multilib \
                         --with-gnu-as \
                         --with-gnu-ld \
                         --disable-nls \
                         --disable-werror \
                         --disable-newlib-supplied-syscalls \
                         --disable-shared \
                         --disable-nls \
                         --disable-libgloss \
			 --with-float=soft
    log "Building ${NEWLIB}"
    NEWLIB_FLAGS="-ffunction-sections -fdata-sections -DPREFER_SIZE_OVER_SPEED -D__OPTIMIZE_SIZE__ -Os -fomit-frame-pointer -fno-unroll-loops -D__BUFSIZ__=256 -mabi=aapcs"
    make ${MAKEFLAGS} CFLAGS_FOR_TARGET="${NEWLIB_FLAGS}" CCASFLAGS="${NEWLIB_FLAGS}"
    install ${NEWLIB} install
    cd ..
    log "Cleaning up ${NEWLIB}"
    touch ${STAMPS}/${NEWLIB}.build
    rm -rf build/* ${NEWLIB}
fi

# Yes, you need to build gcc again!
if [ ! -e ${STAMPS}/${GCC}.build ]; then
    unpack ${GCC}
    cd build
    log "Configuring ${GCC}"
    [ ${USE_CPP} = 1 ] && GCCFLAGS="--enable-languages='c,c++' ${GCCFLAGS}"
    ../${GCCDIR}/configure --target=${TARGET} \
                      --prefix=${PREFIX} \
                      --enable-interwork \
                      --enable-multilib \
                      --with-newlib \
                      --disable-shared \
                      --with-gnu-as \
                      --with-gnu-ld \
		      --disable-nls \
                      --disable-werror \
                      --with-system-zlib \
	 	     ${GCCFLAGS}
    log "Building ${GCC}"
    make ${MAKEFLAGS}
    install ${GCC} install
    cd ..
    log "Cleaning up ${GCC}"
    touch ${STAMPS}/${GCC}.build
    rm -rf build/* ${GCCDIR}
fi

if [ ! -e ${STAMPS}/${GDB}.build ]; then
    unpack ${GDB}
    cd build
    log "Configuring ${GDB}"
    ../${GDB}/configure --target=${TARGET} \
                      --prefix=${PREFIX} \
                      --enable-interwork \
                      --enable-multilib \
                      --disable-werror \
		      ${GDBFLAGS}
    log "Building ${GDB}"
    make ${MAKEFLAGS}
    install ${GDB} install
    cd ..
    log "Cleaning up ${GDB}"
    touch ${STAMPS}/${GDB}.build
    rm -rf build/* ${GDB}
fi

if [ ${OOCD_EN} != 0 ]; then
if [ ! -e ${STAMPS}/openocd-${OOCD}.build ]; then
    unpack openocd-${OOCD}
    cd build
    log "Configuring openocd-${OOCD}"
    CFLAGS="${CFLAGS} ${OOCD_CFLAGS}" \
    LDFLAGS="${LDFLAGS} ${OOCD_LDFLAGS}" \
    ../openocd-${OOCD}/configure --enable-maintainer-mode \
                      --prefix=${PREFIX} \
                      --enable-dummy \
		      --enable-parport \
		      --enable-ft2232_libftdi \
		      --enable-usb_blaster_libftdi \
		      --enable-amtjtagaccel \
		      --enable-zy1000 \
		      --enable-ep93xx \
		      --enable-at91rm9200 \
		      --enable-gw16012 \
		      --enable-presto_libftdi \
		      --enable-usbprog \
		      --enable-jlink \
		      --enable-vsllink \
		      --enable-rlink \
		      --enable-arm-jtag-ew \
		      --enable-buspirate
    log "Building openocd-${OOCD}"
    make ${MAKEFLAGS}
    install openocd-${OOCD} install
    cd ..
    log "Cleaning up openocd-${OOCD}"
    touch ${STAMPS}/openocd-${OOCD}.build
    rm -rf build/* ${OOCD}
fi
fi

if [ ${LIBSTM32_EN} != 0 ]; then
if [ ! -e ${STAMPS}/libcmsis-${LIBCMSIS}.build ]; then
    unpack libcmsis-${LIBCMSIS}
    cd libcmsis-${LIBCMSIS}
    log "Building libcmsis-${LIBCMSIS}"
    make arch_prefix=${TARGET} prefix=${PREFIX}
    install libcmsis-${LIBCMSIS} arch_prefix=${TARGET} prefix=${PREFIX} install
    cd ..
    log "Cleaning up libcmsis-${LIBCMSIS}"
    touch ${STAMPS}/libcmsis-${LIBCMSIS}.build
    rm -rf libcmsis-${LIBCMSIS}
fi

if [ ! -e ${STAMPS}/libstm32-${LIBSTM32}.build ]; then
    unpack libstm32-${LIBSTM32}
    cd libstm32-${LIBSTM32}
    log "Building libstm32-${LIBSTM32}"
    make arch_prefix=${TARGET} prefix=${PREFIX}
    install libstm32-${LIBSTM32} arch_prefix=${TARGET} prefix=${PREFIX} install
    cd ..
    log "Cleaning up libstm32-${LIBSTM32}"
    touch ${STAMPS}/libstm32-${LIBSTM32}.build
    rm -rf libstm32-${LIBSTM32}
fi

if [ ! -e ${STAMPS}/libstm32usb-${LIBSTM32USB}.build ]; then
    unpack libstm32usb-${LIBSTM32USB}
    cd libstm32usb-${LIBSTM32USB}
    log "Building libstm32usb-${LIBSTM32USB}"
    make arch_prefix=${TARGET} prefix=${PREFIX}
    install libstm32usb-${LIBSTM32USB} arch_prefix=${TARGET} prefix=${PREFIX} install
    cd ..
    log "Cleaning up libstm32usb-${LIBSTM32USB}"
    touch ${STAMPS}/libstm32usb-${LIBSTM32USB}.build
    rm -rf libstm32usb-${LIBSTM32USB}
fi
fi

if [ $LIBOPENSTM32_EN != 0 ]; then
if [ ! -e ${STAMPS}/libopenstm32-${LIBOPENSTM32}.build ]; then
    unpack libopenstm32-${LIBOPENSTM32}
    cd libopenstm32-${LIBOPENSTM32}
    log "Building libopenstm32-${LIBOPENSTM32}"
    make PREFIX=${TARGET} DESTDIR=${PREFIX}
    install libopenstm32-${LIBOPENSTM32} PREFIX=${TARGET} DESTDIR=${PREFIX} install
    cd ..
    log "Cleaning up libopenstm32-${LIBOPENSTM32}"
    touch ${STAMPS}/libopenstm32-${LIBOPENSTM32}.build
    rm -rf libopenstm32-${LIBOPENSTM32}
fi
fi

if [ ${SUMMON_DIR_CREATED} = 1 ]; then
    log "Removing work directory"
    rm -rf ${SUMMON_DIR}
fi
